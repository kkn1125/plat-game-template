import Logger from '@util/Logger';
import { UnitState } from '@variable/constant';
import { AttackableUnit } from './implement/AttackableUnit';
import MoveableUnit from './implement/MoveableUnit';
import TouchableUnit from './implement/TouchableUnit';
import UseEquipment from './implement/UseEquipment';
import UseStat from './implement/UseStat';
import Equipment from './option/Equipment';
import Location from './option/Location';
import Stat from './option/Stat';
import GameEngine from '@core/GameEngine';
import GameMap from '@model/gamemap/GameMap';
declare class Unit implements TouchableUnit, AttackableUnit, UseStat, UseEquipment, MoveableUnit {
    order: string[];
    joystick: {
        w: boolean;
        a: boolean;
        d: boolean;
        s: boolean;
    };
    engine: GameEngine;
    logger: Logger<Unit>;
    location: Location;
    id: MakeId<string>;
    name: string;
    position: XY;
    size: XY;
    velocity: XY;
    increaseSpeed: number;
    speed: number;
    hp: number;
    mp: number;
    maxHp: number;
    maxMp: number;
    state: UnitState;
    stat: Stat;
    equipment: Equipment;
    defaultDamage: number;
    unitColor: string;
    cropSizeX: number;
    cropSizeY: number;
    cropPadX: number;
    cropPadY: number;
    limitFrame: number;
    FPS: number;
    frame: number;
    sprites: HTMLImageElement;
    gaze: Gaze;
    detectable: boolean;
    boundary: Unit | null;
    aroundUnits: Unit[];
    constructor(name: string, option?: HealthOption);
    get isControlUnit(): boolean;
    get minDamage(): number;
    get maxDamage(): number;
    get damageGap(): number;
    get damage(): number;
    get fieldPosition(): never[] | undefined;
    get gazeValue(): 0 | 200 | 400 | 600;
    setLocation(gameMap: GameMap): void;
    setSprites(sprites: HTMLImageElement): void;
    setGameEngine(engine: GameEngine): void;
    setPosition(x: number, y: number): void;
    setState(state: UnitState): void;
    changeLocation(location: Maps): void;
    move(x: number, y: number): void;
    detect(): void;
    around(): void;
    get closeUnit(): Unit | null;
    draw(ctx: CanvasRenderingContext2D, { worldAxisX, worldAxisY }: WorldAxis): void;
    drawDetect(ctx: CanvasRenderingContext2D, { worldAxisX, worldAxisY }: WorldAxis): void;
    drawName(ctx: CanvasRenderingContext2D, { worldAxisX, worldAxisY }: WorldAxis): void;
    drawCharacter(ctx: CanvasRenderingContext2D, { worldAxisX, worldAxisY }: WorldAxis): void;
    attack(): void;
    getHp(): number;
    getMp(): number;
    decreaseHp(amount: number): void;
    decreaseMp(amount: number): void;
    getDamage(): number;
}
export default Unit;
